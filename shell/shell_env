#!/bin/bash

executable() {
    local cmd=$1
    if command -v $cmd >/dev/null 2>&1; then
        return $(true)
    else
        return $(false)
    fi
}

# .env file example
# ENV1=value1
# ENV2=value2
loadenv() {
    local envfile=".env"
    [[ $1 ]] && envfile=$1
    if [[ -f $envfile ]]; then
        set -a
        source $envfile
        set +a
    else
        echo "no env file founnd"
    fi
}

add_to_path() {
    local p=$1
    if [[ ! $p ]]; then
        return
    fi

    if [[ ! -d $p ]]; then
        return
    fi

    if [[ ! "$PATH" == *"$p"* ]]; then
        export PATH="$p:$PATH"
    fi
}

add_to_path "$HOME/.local/bin"
add_to_path "$HOME/.cargo/bin"
[ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ] && source "$HOME/anaconda3/etc/profile.d/conda.sh"
[ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ] && source "$HOME/miniconda3/etc/profile.d/conda.sh"
add_to_path "/opt/TinyTeX/bin/x86_64-linux"
add_to_path "$HOME/.local/share/nvim/mason/bin"
# need to config npm
# mkdir -p ~/.local/share/npm-global
# npm config set prefix '~/.local/share/npm-global'
add_to_path "$HOME/.local/share/npm-global/bin"

test -f "$HOME/.xmake/profile" && source "$HOME/.xmake/profile"

# 去除重复内容, 且不排序
export PATH=$(echo $PATH | sed "s/:/\n/g" | uniq | tr -s "\n" ":" | sed "s/:$//g")

# 禁用python输出缓存，实时输出结果到屏幕和文件, 或者在执行的时候加上 -u 参数
export PYTHONUNBUFFERED=1

# default editor
export EDITOR=nvim

export STARSHIP_CONFIG=~/.config/starship/starship.toml

export GOPATH=~/.cache/go
export GOBIN=~/.local/bin

# turn off bell ring
[ -f /usr/bin/xset ] && xset b off

# batcat
export MANPAGER="sh -c 'bat -l man -p'"

# [[ -f ~/.fzfrc ]] && source ~/.fzfrc
# fzf settigns
export FZF_DEFAULT_COMMAND="
    fdfind
    --type file
    --hidden
    --follow
    --exclude={.git,node_modules,build}
    . /etc /home
    "
export FZF_DEFAULT_OPTS="
	--layout=reverse
    --preview-window 'right:60%'
    "
# --preview 'batcat --color=always --style=header,grid --line-range :300 {}'

# --border
# --height 50%

# z.lua
export ZLUA_LUAEXE=$(which luajit)
export _ZL_ADD_ONCE=1
export _ZL_ECHO=1
export _ZL_MATCH_MODE=1
export _ZL_DATA=~/.cache/zlua
export _ZL_ROOT_MARKERS=".git,.svn,.hg,.root,package.json"

GLFW_IM_MODULE=ibus

if [ $WSL_DISTRO_NAME ]; then
    n=$(cat /etc/resolv.conf | grep -o nameserver | wc -l)
    # /etc/resolv.conf文件中只有一个nameserver则是wsl2,否则是wsl1
    if [ $n -eq 1 ]; then
        export WSL_VERSION=2
        export WSL_HOST_IP=$(cat /etc/resolv.conf | grep "nameserver" | cut -f 2 -d " ")
        export DISPLAY=$WSL_HOST_IP:0
    else
        export WSL_VERSION=1
    fi
fi

function setproxy() {
    # default
    host_ip="127.0.0.1"
    proxy_port=7890

    # if .. then ..
    [[ $1 ]] && host_ip=$1
    [[ $2 ]] && proxy_port=$2
    [[ $WSL_VERSION -eq 2 ]] && host_ip=$WSL_HOST_IP

    export http_proxy="http://${host_ip}:${proxy_port}"
    export https_proxy="http://${host_ip}:${proxy_port}"
    export all_proxy="socks5://${host_ip}:${proxy_port}"
    echo "set http(s)_proxy=${http_proxy}"
    echo "set all_proxy=${all_proxy}"
}
function unproxy() {
    unset http_proxy
    unset https_proxy
    unset all_proxy
    echo "unset http(s)_proxy"
    echo "unset all_proxy"
}
function proxyenv() {
    echo "HTTP_PROXY=$HTTP_PROXY"
    echo "HTTPS_PROXY=$HTTPS_PROXY"
    echo "http_proxy=$http_proxy"
    echo "https_proxy=$https_proxy"
    echo "all_proxy=$all_proxy"
}
